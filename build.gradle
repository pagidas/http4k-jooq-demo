plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'nu.studer.jooq' version '3.0.3'
    id 'java-library'
    id "org.flywaydb.flyway" version "6.3.2"
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.bmuschko.docker-remote-api' version '6.4.0'
}

apply from: rootProject.file("versions.gradle")

mainClassName = 'me.kostasakrivos.demo.http4k.ItemAppKt'

group 'me.kostasakrivos.demo.http4k'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    compile kotlin
    compile http4kCore
    compile http4kJsonAndContractRoute
    compile http4kOAuth
    compile http4kServer
    compile http4kClient
    compile http4kHamkrest
    compile jooq
    compile typesafeConfig
    compile database
    compile hikari
    compile slf4jLogging
    compile flyway

    jooqRuntime database

    testCompile jupiter
    testCompile approvalTesting
    testCompile mockk
    testRuntimeOnly jupiterEngine
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer

Properties properties = new Properties()
def propsFile = project.rootProject.file(".env")
if (propsFile.exists()) {
    properties.load(propsFile.newDataInputStream())
}
def dbPassword = properties.getProperty('DB_PASSWORD')
def dbName = properties.getProperty('DB_NAME')

task buildAppImage(type: DockerBuildImage) {
    description('Builds the app image based on the local Dockerfile.')
    files "$buildDir/libs/${project.name}-${project.version}-all.jar"
    buildArgs = [JAR_FILE: "${project.name}-${project.version}-all.jar"]
    images.add("${project.name}:${project.version}")
}

task pullMysql(type: DockerPullImage) {
    image = 'mysql:8.0.18'
}

task createLocalMysqlContainer(type: DockerCreateContainer) {
    dependsOn pullMysql
    targetImageId pullMysql.image
    containerName = 'items_db'
    withEnvVar('MYSQL_ROOT_PASSWORD', dbPassword)
    withEnvVar('MYSQL_DATABASE', dbName)
}

task localMysql(type: DockerStartContainer) {
    description('Runs a local mysql container for testing gihub PR on jenkins.')
    dependsOn createLocalMysqlContainer
    targetContainerId createLocalMysqlContainer.containerId
}

flyway {
    driver = 'com.mysql.cj.jdbc.Driver'
    url = System.env.DB_URL ?: "jdbc:mysql://${System.env.DB_HOST ?: "localhost"}:3306"
    user = System.env.DB_USERNAME ?: "root"
    password = System.env.DB_PASSWORD ?: ""
}

jooq {
    version = jooq_version
    itemsApp(sourceSets.main, jooqConfig())
}

shadowJar {
    mergeServiceFiles()
}

def jooqConfig() {
    return {
        logging = 'DEBUG'
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
            url = System.env.DB_URL ?: "jdbc:mysql://${System.env.DB_HOST ?: "localhost"}:3306"
            user = System.env.DB_USERNAME ?: "root"
            password = System.env.DB_PASSWORD ?: ""
            schema = 'items_app'
        }
        generator {
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'items_app'
            }
        }
    }
}


